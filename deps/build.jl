using Compat
using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    ExecutableProduct(prefix, "thrift", :thrift),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/tanmaykm/JuliaThriftBuilder/releases/download/julia0.7-thrift0.11.0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, :glibc) => ("$bin_prefix/JuliaThriftBuilder.v1.0.0.aarch64-linux-gnu.tar.gz", "f759a0cae9e911057fda2a5a15c6c50d6bb734c2438195b27ef446d0c725c799"),
    Linux(:aarch64, :musl) => ("$bin_prefix/JuliaThriftBuilder.v1.0.0.aarch64-linux-musl.tar.gz", "b4d85748013c95512e0dc8c76b038f2f968b8439b5c4c9a36cd537d13bf1cb5d"),
    Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/JuliaThriftBuilder.v1.0.0.arm-linux-gnueabihf.tar.gz", "496c3db9286db02568fca8a69f9837b4c8988631af004926ae176c89bcc0f2ed"),
    Linux(:armv7l, :musl, :eabihf) => ("$bin_prefix/JuliaThriftBuilder.v1.0.0.arm-linux-musleabihf.tar.gz", "3972190ee872ed2fbf54337a419b623bd26abdc8220e64b6eb25b0d472408999"),
    Linux(:i686, :glibc) => ("$bin_prefix/JuliaThriftBuilder.v1.0.0.i686-linux-gnu.tar.gz", "7ef34eb99c75fb6f991663c11733cd9d0cf590a98df7fba2a0d132dff7582d76"),
    Linux(:i686, :musl) => ("$bin_prefix/JuliaThriftBuilder.v1.0.0.i686-linux-musl.tar.gz", "9aeff6fa1af43f33a7f042d31b9d716d41789aab922dd2183b26d4593ea842ad"),
    Linux(:powerpc64le, :glibc) => ("$bin_prefix/JuliaThriftBuilder.v1.0.0.powerpc64le-linux-gnu.tar.gz", "17a0ea863338cc0788f4e1d5c8104149f4cdeeeddab9aa6c3471ac7f5a26bb9d"),
    MacOS(:x86_64) => ("$bin_prefix/JuliaThriftBuilder.v1.0.0.x86_64-apple-darwin14.tar.gz", "c61dad0b08c81ef213567da55a28f1701729a2c935b5d0359198aef5d5f6ad3d"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/JuliaThriftBuilder.v1.0.0.x86_64-linux-gnu.tar.gz", "11b76f7741ec2c7b728caba42feac1c9fd343c3b1b5a3ce35569a89f8aae2593"),
    Linux(:x86_64, :musl) => ("$bin_prefix/JuliaThriftBuilder.v1.0.0.x86_64-linux-musl.tar.gz", "1bff8067902ca739031ad114dd842cbd377034dbcc63471754936d2ca08cf0aa"),
    FreeBSD(:x86_64) => ("$bin_prefix/JuliaThriftBuilder.v1.0.0.x86_64-unknown-freebsd11.1.tar.gz", "7ba167279dd3eed5fde8584fe88ed379e0499eaaf67a88b596783b0a8f11d9d6"),
)

if Compat.Sys.iswindows()
    info("No pre-built Julia Thrift compiler found for your platform $(triplet(platform_key())). Not required unless you want to compile new Thrift IDLs. Follow package instructions to build on your own if needed.")
else
    # Install unsatisfied or updated dependencies:
    unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
    if haskey(download_info, platform_key())
        url, tarball_hash = download_info[platform_key()]
        if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
            # Download and install binaries
            install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
        end
    elseif unsatisfied
        # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
        # Alternatively, you could attempt to install from a separate provider,
        # build from source or something even more ambitious here.
        error("Your platform $(triplet(platform_key())) is not supported by this package!")
    end

    # Write out a deps.jl file that will contain mappings for our products
    write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
end
